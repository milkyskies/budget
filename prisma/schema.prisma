// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @map("id")
  email        String    @unique @map("email")
  passwordHash String    @map("password_hash")
  budgets      Budget[]
  sessions     Session[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Session {
  id        String    @id @map("id")
  userId    String    @map("user_id")
  expiresAt DateTime? @map("expires_at")
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("sessions")
}

model Budget {
  id             String          @id @map("id")
  name           String          @map("name")
  userId         String          @map("user_id")
  user           User            @relation(fields: [userId], references: [id])
  categoryGroups CategoryGroup[]
  accounts       Account[]
  externalParty  ExternalParty[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("budgets")
}

model CategoryGroup {
  id         String     @id @map("id")
  name       String     @map("name")
  budgetId   String     @map("budget_id")
  budget     Budget     @relation(fields: [budgetId], references: [id])
  categories Category[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("category_groups")
}

model Category {
  id              String        @id @map("id")
  name            String        @map("name")
  categoryGroupId String        @map("category_group_id")
  categoryGroup   CategoryGroup @relation(fields: [categoryGroupId], references: [id])
  assignedAmount  Int           @default(0) @map("assigned_amount")
  entryItems      EntryItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

enum EntryType {
  EXPENSE
  INCOME
  TRANSFER
}

enum EntrySystemType {
  NORMAL
  INITIAL_BALANCE
}

// Always from the perspective of the account
model Entry {
  id String @id @map("id")

  type       EntryType       @map("type")
  systemType EntrySystemType @default(NORMAL) @map("system_type")
  date       DateTime        @map("date")
  memo       String          @map("memo")

  accountId            String  @map("account_id")
  destinationAccountId String? @map("destination_account_id") // For transfers
  externalPartyId      String? @map("external_party_id") // For income and expenses

  account            Account        @relation("Account", fields: [accountId], references: [id], onDelete: Cascade)
  destinationAccount Account?       @relation("DestinationAccount", fields: [destinationAccountId], references: [id])
  externalParty      ExternalParty? @relation(fields: [externalPartyId], references: [id])
  entryItems         EntryItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("entries")
}

model EntryItem {
  id         String  @id @map("id")
  entryId    String  @map("entry_id")
  categoryId String? @map("category_id")
  amount     Int     @map("amount")

  entry    Entry     @relation(fields: [entryId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("entry_items")
}

model ExternalParty {
  id       String @id @map("id")
  name     String @map("name")
  budgetId String @map("budget_id")
  budget   Budget @relation(fields: [budgetId], references: [id])

  entries Entry[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("external_parties")
}

enum AccountType {
  CASH
  CHECKING
  SAVINGS
  CREDIT_CARD
}

model Account {
  id     String      @id @map("id")
  name   String      @map("name")
  type   AccountType @map("type")
  budget Budget      @relation(fields: [budgetId], references: [id])

  budgetId String @map("budget_id")

  entries          Entry[] @relation("Account") // Entries that are bassed on this account
  receivingEntries Entry[] @relation("DestinationAccount") // Entries that are transfers and are transferring to this account

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("accounts")
}
