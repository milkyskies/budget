// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid()) @map("id")
  email        String    @unique @map("email")
  passwordHash String    @map("password_hash")
  budgets      Budget[]
  sessions     Session[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Session {
  id        String    @id @default(uuid()) @map("id")
  userId    String    @map("user_id")
  expiresAt DateTime? @map("expires_at")
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("sessions")
}

model Budget {
  id             String          @id @default(uuid()) @map("id")
  name           String          @map("name")
  userId         String          @map("user_id")
  user           User            @relation(fields: [userId], references: [id])
  categoryGroups CategoryGroup[]
  accounts       Account[]
  payee          Payee[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("budgets")
}

model CategoryGroup {
  id         String     @id @default(uuid()) @map("id")
  name       String     @map("name")
  budgetId   String     @map("budget_id")
  budget     Budget     @relation(fields: [budgetId], references: [id])
  categories Category[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("category_groups")
}

model Category {
  id              String        @id @default(uuid()) @map("id")
  name            String        @map("name")
  categoryGroupId String        @map("category_group_id")
  categoryGroup   CategoryGroup @relation(fields: [categoryGroupId], references: [id])
  assignedAmount  Int           @default(0) @map("assigned_amount")
  entries         Entry[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("categories")
}

model Payee {
  id        String   @id @default(uuid()) @map("id")
  name      String   @map("name")
  budgetId  String   @map("budget_id")
  budget    Budget   @relation(fields: [budgetId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Entry     Entry[]

  @@map("payees")
}

model Entry {
  id         String   @id @default(uuid()) @map("id")
  amount     Float    @map("amount")
  date       DateTime @map("date")
  payeeId    String?  @map("payee_id")
  payee      Payee?   @relation(fields: [payeeId], references: [id])
  memo       String   @map("memo")
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("entries")
}

enum AccountType {
  CASH
  CHECKING
  SAVINGS
  CREDIT_CARD
}

model Account {
  id        String      @id @default(uuid()) @map("id")
  name      String      @map("name")
  balance   Float       @map("balance")
  budgetId  String      @map("budget_id")
  type      AccountType @map("type")
  budget    Budget      @relation(fields: [budgetId], references: [id])
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("accounts")
}
